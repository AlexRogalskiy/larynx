# -----------------------------------------------------------------------------
# Python 3.7
# -----------------------------------------------------------------------------

FROM debian:buster-slim as python37

ENV LANG C.UTF-8
ENV DEBIAN_FRONTEND=noninteractive

# IFDEF APT_PROXY
#! RUN echo 'Acquire::http { Proxy "http://${APT_PROXY_HOST}:${APT_PROXY_PORT}"; };' >> /etc/apt/apt.conf.d/01proxy
# ENDIF

RUN apt-get update && \
    apt-get install --yes --no-install-recommends \
        build-essential \
        git zlib1g-dev patchelf rsync \
        libncursesw5-dev libreadline-gplv2-dev libssl-dev \
        libgdbm-dev libc6-dev libsqlite3-dev libbz2-dev libffi-dev

ADD download/Python-3.7.10.tar.xz /build

RUN cd /build/Python-3.7.10 && \
    ./configure --enable-optimizations && \
    make -j 4 && \
    make install DESTDIR=/usr/lib/larynx-tts

# -----------------------------------------------------------------------------
# OpenTTS
# -----------------------------------------------------------------------------

FROM debian:buster-slim as build

# IFDEF APT_PROXY
#! RUN echo 'Acquire::http { Proxy "http://${APT_PROXY_HOST}:${APT_PROXY_PORT}"; };' >> /etc/apt/apt.conf.d/01proxy
# ENDIF

RUN apt-get update && \
    apt-get install --yes --no-install-recommends \
        build-essential libssl1.1 dpkg-dev

ENV APP_DIR=/usr/lib/larynx-tts

COPY --from=python37 ${APP_DIR}/ ${APP_DIR}/
COPY --from=python37 ${APP_DIR}/usr/local/include/python3.7m/ /usr/include/
ENV PYTHON=${APP_DIR}/usr/local/bin/python3

# IFDEF PYPI_PROXY
#! ENV PIP_INDEX_URL=http://${PYPI_PROXY_HOST}:${PYPI_PROXY_PORT}/simple/
#! ENV PIP_TRUSTED_HOST=${PYPI_PROXY_HOST}
# ENDIF

RUN ${PYTHON} -m pip install --upgrade 'pip<=20.2.4' && \
    ${PYTHON} -m pip install --upgrade wheel setuptools

# Install Python packages
COPY download/ /download/
COPY requirements.txt ${APP_DIR}/larynx/
RUN cd ${APP_DIR}/larynx && \
    ${PYTHON} -m pip install -f /download -r requirements.txt

# Create Debian package
ENV BUILD_DIR=/build
ENV BUILD_APP_DIR=${BUILD_DIR}/larynx-tts/${APP_DIR}

RUN mkdir -p ${BUILD_DIR}/larynx-tts/usr/lib && \
    cp -R ${APP_DIR} ${BUILD_DIR}/larynx-tts/usr/lib/

# Copy Larynx source
COPY licenses/ ${BUILD_APP_DIR}/licenses/
COPY larynx/ ${BUILD_APP_DIR}/larynx/
COPY README.md LICENSE ${BUILD_APP_DIR}/

COPY debian/control.in /
RUN export DEBIAN_ARCH="$(dpkg-architecture | grep DEB_BUILD_ARCH= | sed -e 's/[^=]\\+=//')" && \
    export VERSION="$(cat ${BUILD_DIR}/larynx-tts/${APP_DIR}/larynx/VERSION)" && \
    mkdir -p ${BUILD_DIR}/larynx-tts/DEBIAN && \
    sed -e s"/@VERSION@/${VERSION}/" -e "s/@DEBIAN_ARCH@/${DEBIAN_ARCH}/" < /control.in > ${BUILD_DIR}/larynx-tts/DEBIAN/control

COPY debian/larynx-tts debian/larynx-tts-server ${BUILD_DIR}/larynx-tts/usr/bin/
RUN chmod +x ${BUILD_DIR}/larynx-tts/usr/bin/*

RUN cd ${BUILD_DIR} && \
    dpkg --build larynx-tts

RUN cd ${BUILD_DIR} && \
    dpkg-name *.deb

# -----------------------------------------------------------------------------

# IFDEF NOBUILDX
FROM debian:buster-slim
# ELSE
FROM scratch
# ENDIF

COPY --from=build /build/*.deb /
